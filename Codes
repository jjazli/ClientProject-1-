{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "I06OU9PVfKG9"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from scipy.stats import zscore\n",
        "\n",
        "# Load Excel Data\n",
        "excel_file = \"\"  # Replace with file path\n",
        "data = pd.read_excel(excel_file)\n",
        "\n",
        "# Data Cleaning\n",
        "data = data.dropna(subset=[\"Video Duration\", \"Average Watch Time\", \"Posting Time\", \"Views\"])\n",
        "data[\"Views\"] = data[\"Views\"].fillna(0)\n",
        "data = data.drop_duplicates()\n",
        "data[\"Posting Time\"] = pd.to_datetime(data[\"Posting Time\"], errors=\"coerce\")\n",
        "data = data.dropna(subset=[\"Posting Time\"])\n",
        "data[\"Video Duration\"] = pd.to_numeric(data[\"Video Duration\"], errors=\"coerce\")\n",
        "data[\"Average Watch Time\"] = pd.to_numeric(data[\"Average Watch Time\"], errors=\"coerce\")\n",
        "\n",
        "# Outlier Detection (Z-scores)\n",
        "z_scores = np.abs(zscore(data[[\"Video Duration\", \"Average Watch Time\"]]))\n",
        "data[\"Outlier\"] = (z_scores > 3).any(axis=1)\n",
        "\n",
        "# Derived Metrics\n",
        "data[\"Engagement Rate\"] = data[\"Average Watch Time\"] / data[\"Video Duration\"]\n",
        "\n",
        "# Scatter Plot: Video Duration vs Viewer Engagement\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(\n",
        "    x=data[\"Video Duration\"],\n",
        "    y=data[\"Average Watch Time\"],\n",
        "    hue=data[\"Outlier\"],\n",
        "    palette={True: \"red\", False: \"blue\"},\n",
        "    edgecolor=\"w\", alpha=0.7\n",
        ")\n",
        "plt.axvline(data[\"Video Duration\"].mean(), color=\"red\", linestyle=\"--\", label=\"Mean Video Duration\")\n",
        "plt.axhline(data[\"Average Watch Time\"].mean(), color=\"green\", linestyle=\"--\", label=\"Mean Watch Time\")\n",
        "plt.title(\"Video Duration vs Viewer Engagement\")\n",
        "plt.xlabel(\"Video Duration (s)\")\n",
        "plt.ylabel(\"Average Watch Time (s)\")\n",
        "plt.legend(title=\"Outlier\")\n",
        "plt.grid(True)\n",
        "plt.savefig(\"scatter_duration_vs_engagement_portfolio.png\")\n",
        "plt.show()\n",
        "\n",
        "# Correlation Heatmap\n",
        "corr = data[[\"Video Duration\", \"Average Watch Time\", \"Views\", \"Engagement Rate\"]].corr()\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(corr, annot=True, cmap=\"coolwarm\", fmt=\".2f\", cbar=True)\n",
        "plt.title(\"Correlation Heatmap of TikTok Metrics\")\n",
        "plt.savefig(\"correlation_heatmap_portfolio.png\")\n",
        "plt.show()\n",
        "\n",
        "# Line Chart with Annotations\n",
        "plt.figure(figsize=(12, 6))\n",
        "data_sorted = data.sort_values(\"Posting Time\")\n",
        "sns.lineplot(x=\"Posting Time\", y=\"Average Watch Time\", data=data_sorted, label=\"Average Watch Time\", marker=\"o\")\n",
        "sns.lineplot(x=\"Posting Time\", y=\"Views\", data=data_sorted, label=\"Views\", marker=\"o\")\n",
        "max_watch_time = data_sorted.loc[data_sorted[\"Average Watch Time\"].idxmax()]\n",
        "plt.annotate(\n",
        "    f\"Peak: {max_watch_time['Average Watch Time']:.2f}s\",\n",
        "    (max_watch_time[\"Posting Time\"], max_watch_time[\"Average Watch Time\"]),\n",
        "    xytext=(-50, 30), textcoords=\"offset points\",\n",
        "    arrowprops=dict(arrowstyle=\"->\", color=\"red\"),\n",
        "    fontsize=10, color=\"red\"\n",
        ")\n",
        "plt.title(\"Engagement Trends Over Time\")\n",
        "plt.xlabel(\"Posting Time\")\n",
        "plt.ylabel(\"Engagement Metrics\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "# Export Cleaned Data for Reference\n",
        "output_file = \"\"\n",
        "data.to_excel(output_file, index=False)\n"
      ]
    }
  ]
}
